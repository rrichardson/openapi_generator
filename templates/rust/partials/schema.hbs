{{~>subtypes name=name}}
{{~#if description~}}
{{prefix_lines "/// " description}}
{{/if}}
{{~#if [$ref]~}}
pub type {{camelcase name suffix}} = {{>data_type required="true"}};
{{~else}}
    {{~#if (eq type "object")~}}
        {{~#if properties~}}
            #[derive(Clone, Debug, Deserialize, PartialEq, Serialize)]
            pub struct {{camelcase name suffix}} {
            {{~#each properties}}
   		{{~#unless (eq (sane_snakecase @key) (snakecase @key))}}
		#[serde(rename = "{{snakecase @key}}")]
		{{~/unless}}
                {{~#if (has ../../required @key)}}
                pub {{sane_snakecase @key}}: {{>data_type name=(camelcase ../name @key) required="true"}},
                {{~else}}
                #[serde(skip_serializing_if = "Option::is_none")]
                pub {{sane_snakecase @key}}: {{>data_type name=(camelcase ../name @key)}},
                {{~/if}}
            {{~/each}}
            {{~#if additionalProperties}}
                pub properties: serde_json::Map<String, serde_json::Value>,
            {{~/if}}
            }

            {{~#if (has this.[x-tags] "multipart")}}
            impl TryFrom<HashMap<String, Vec<u8>>> for {{camelcase name suffix}} {
                type Error = &'static str;

                fn try_from(mut data: HashMap<String, Vec<u8>>) -> Result<Self, Self::Error> {
                    Ok({{camelcase name suffix}} {
                        {{~#each properties}}
                            {{sane_ snakecase @key}}: data.remove("{{snakecase @key}}").ok_or_else(|| "missing field {{sane_snakecase @key}}")?,
                        {{~/each}}
                    })
                }
            }
            {{~/if}}
	{{~else}}
	    {{~#if additionalProperties~}}
	        pub type {{camelcase name suffix}} = serde_json::Map<String, serde_json::Value>;
	    {{~else}}
	        {{! Empty/missing properties is acceptable according to the spec }}
		pub type {{camelcase name suffix}} = ();
            {{~/if}}
        {{~/if}}
    {{~else~}}
        {{~#if (and (eq type "string") enum (not format))}}
            #[derive(Clone, Copy, Debug, Deserialize, PartialEq, Eq, Serialize)]
            pub enum {{camelcase ../name @key suffix}} {
                {{~#each enum}}
		#[serde(rename = "{{this}}")]
		#[allow(non_camel_case_types)]
                {{sane_camelcase this}},
                {{~/each}}
            }

            impl std::fmt::Display for {{camelcase ../name @key suffix}} {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
                    write!(f, "{}",
                        match self {
                            {{~#each enum}}
                            {{camelcase ../name @key suffix}}::{{sane_camelcase this}} => "{{this}}",
                            {{~/each}}
                        }
                    )
                }
            }

        {{~else~}}
            pub type {{camelcase name suffix}} =
                {{~#if type}} {{>data_type required="true"}}
                {{~else}} ()
                {{~/if}};
        {{/if}}
    {{~/if}}
{{~/if}}
